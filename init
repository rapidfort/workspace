#!/bin/bash -e
# shellcheck disable=SC1091

# August 25
YQ_RELEASE=v4.44.3
KIND_RELEASE=v0.24.0
GOLANG_RELEASE=1.23.0
HELM_RELEASE=v3.15.4

source .pretty_print

get_os_str()
{
    # works on all posix shell
    local _os
    _os="$(uname)"
    echo -n "$(echo "${_os}" | tr '[:upper:]' '[:lower:]')"
}

get_architecture()
{
    local _arch
    _arch="$(uname -m)"
    if [ "${_arch}" = "aarch64" ] || [ "${_arch}" = "arm64" ]; then
        echo -n "arm64"
    elif [ "${_arch}" = "amd64" ] || [ "${_arch}" = "x86_64" ]; then
        echo -n "amd64"
    else
        print_bred "ERROR: $(get_os_str): ${_arch} not supported."
        exit 1
    fi
}

get_architecture_alt()
{
    if [ "$(get_architecture)" = "arm64" ]; then
        echo -n "aarch64"
    else
        echo -n "x86_64"
    fi
}

tailscale_install() {
    curl -fsSL https://tailscale.com/install.sh | sh
}

docker_install() {
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm -f get-docker.sh
}

aws_install() {
    print_bgreen "Installing AWS CLI"
    URL=https://awscli.amazonaws.com/awscli-exe-linux-"$(get_architecture)".zip
    if ! curl --output /dev/null --silent --head --fail -L "${URL}"; then
        URL=https://awscli.amazonaws.com/awscli-exe-linux-"$(get_architecture_alt)".zip
    fi
    rm -rf awscliv2.zip
    curl -o "awscliv2.zip" "${URL}"
    unzip awscliv2.zip
    ./aws/install
    rm -rf awscliv2.zip aws
}

az_install() {
    print_bgreen "Installing az cli"
    curl -sL https://aka.ms/InstallAzureCLIDeb | bash
}

gcp_install() {
    print_bgreen "Installing gcp cli"
    curl -sSL https://sdk.cloud.google.com | bash
}

go_install() {
    print_bgreen "Installing golang"
    URL=https://go.dev/dl/go${GOLANG_RELEASE}."$(get_os_str)"-"$(get_architecture)".tar.gz
    if ! curl --output /dev/null --silent --head --fail -L "${URL}"; then
        URL=https://go.dev/dl/go${GOLANG_RELEASE}."$(get_os_str)"-"$(get_architecture_alt)".tar.gz
    fi
    curl -Lo go${GOLANG_RELEASE}."$(get_os_str)"-"$(get_architecture)".tar.gz "${URL}"
    rm -rf /usr/local/go && tar -C /usr/local -xzf go${GOLANG_RELEASE}."$(get_os_str)"-"$(get_architecture)".tar.gz
    rm go${GOLANG_RELEASE}."$(get_os_str)"-"$(get_architecture)".tar.gz
}

yq_install() {
    print_bgreen "Installing yq"
    URL=https://github.com/mikefarah/yq/releases/download/${YQ_RELEASE}/yq_"$(get_os_str)"_"$(get_architecture)"
    if ! curl --output /dev/null --silent --head --fail -L "$URL"; then
        URL=https://github.com/mikefarah/yq/releases/download/${YQ_RELEASE}/yq_"$(get_os_str)"_"$(get_architecture_alt)"
    fi

    curl -Lo /usr/local/bin/yq "${URL}"
    chmod +x /usr/local/bin/yq
}

kind_install() {
    print_bgreen "Installing kind"
    URL=https://kind.sigs.k8s.io/dl/${KIND_RELEASE}/kind-"$(get_os_str)"-"$(get_architecture)"
    if ! curl --output /dev/null --silent --head --fail -L "${URL}"; then
        URL=https://kind.sigs.k8s.io/dl/${KIND_RELEASE}/kind-"$(get_os_str)"-"$(get_architecture_alt)"
    fi
    curl -Lo /usr/local/bin/kind "${URL}"
    chmod +x /usr/local/bin/kind
}

helm_install() {
    print_bgreen "Installing helm"
    URL=https://get.helm.sh/helm-${HELM_RELEASE}-"$(get_os_str)"-"$(get_architecture)".tar.gz
    if ! curl --output /dev/null --silent --head --fail -L "$URL"; then
        URL=https://get.helm.sh/helm-${HELM_RELEASE}-"$(get_os_str)"-"$(get_architecture_alt)".tar.gz
    fi
    curl -Lo helm-${HELM_RELEASE}-"$(get_os_str)"-"$(get_architecture)".tar.gz "${URL}"
    tar zxvf helm-${HELM_RELEASE}-"$(get_os_str)"-"$(get_architecture)".tar.gz
    mv -vf "$(get_os_str)"-"$(get_architecture)"/helm /usr/local/bin
    rm -rf "$(get_os_str)"-"$(get_architecture)"
    rm -f helm-${HELM_RELEASE}-"$(get_os_str)"-"$(get_architecture)".tar.gz
}

kubectl_install() {
    print_bgreen "Installing kubectl"
    URL=https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/"$(get_os_str)"/"$(get_architecture)"/kubectl
    if ! curl --output /dev/null --silent --head --fail -L "${URL}"; then
        URL=https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/"$(get_os_str)"/$(get_architecture_alt)/kubectl
    fi
    curl -Lo /usr/local/bin/kubectl "${URL}"
    chmod +x /usr/local/bin/kubectl
}

debian_init() {
    export TZ="/usr/share/zoneinfo/America/Los_Angeles"
    export LC_ALL="C"
    export DEBIAN_FRONTEND=noninteractive
    apt update
    # Please keep it sorted
    apt install -y acl \
                    apcalc \
                    aptitude \
                    apt-transport-https \
                    autoconf \
                    bc \
                    bison \
                    bsdmainutils \
                    build-essential \
                    ca-certificates \
                    calc \
                    cargo \
	                cmake \
                    cmake-data \
                    conntrack \
                    curl \
                    default-libmysqlclient-dev \
                    default-mysql-client \
                    emacs-nox \
                    ethtool \
                    flex \
                    fzf \
                    git \
                    gnupg \
                    inotify-tools \
                    jq \
                    libffi-dev \
                    libssl-dev \
                    libtool \
                    lsb-release \
                    lvm2 \
                    lynx \
                    moreutils \
                    musl-dev \
		            nasm \
                    net-tools \
                    npm \
                    openntpd \
                    parallel \
                    pkg-config \
                    procmail \
                    pylint \
                    python3.11-venv \
                    python3-dev \
                    python3-pip \
                    redis-tools \
                    rsync \
                    screen \
                    shc \
                    shellcheck \
                    sl \
                    socat \
                    strace \
                    sudo \
                    swig \
                    tcpdump \
                    time \
                    tmux \
                    unzip \
                    vim \
                    wget
}

init() {
    local update
    if [ "$1" = "update" ]; then
        update=true
    fi

    if [ "$(get_os_str)" = "linux" ]; then
        if [ -f /etc/os-release ]; then
            source /etc/os-release
            if [ "$ID" = "debian" ] || [ "$ID" = "ubuntu" ]; then
                debian_init
                if [ $update ] || [ -z "$(command -v docker)" ]; then
                    docker_install
                fi

                if [ $update ] || [ -z "$(command -v tailscale)" ]; then
                    tailscale_install
                fi
                if [ $update ] || [ -z "$(command -v go)" ]; then
                    go_install
                fi
                if [ $update ] || [ -z "$(command -v helm)" ]; then
                    helm_install
                fi
                if [ $update ] || [ -z "$(command -v kind)" ]; then
                    kind_install
                fi
                if [ $update ] || [ -z "$(command -v yq)" ]; then
                    yq_install
                fi
                if [ $update ] || [ -z "$(command -v kubectl)" ]; then
                    kubectl_install
                fi
                if [ $update ] || [ -z "$(command -v aws)" ]; then
                    aws_install
                fi
                if [ $update ] || [ -z "$(command -v az)" ]; then
                    az_install
                fi
                if [ $update ] || [ -z "$(command -v gcloud)" ]; then
                    #gcp_install
                    :
                fi
            fi
        fi
    elif [ "$(get_os_str)" = "darwin" ]; then
        print_bred "MacOSX: To Do"
        exit 1
    else
        print_bred "NotSupported: $(get_os_str) $(get_architecture) To Do"
    fi

    # install aliases
    for f in .bashrc .pylintrc .screenrc .vimrc .kubectl_aliases .user_data .bashrc.rfserver
    do
        cp -f $f ~
    done

    if test -s "${HOME}"/.git-prompt.sh ; then
        curl -Lo "${HOME}"/.git-prompt.sh https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh
        source "${HOME}"/.git-prompt.sh
    fi

    source "${HOME}"/.bashrc
    mkdir -p /root/rapidfort

    # Setup RapidFort
    if [ ! -s /root/BUILD_USER_NAME ]; then
        echo build-system > /root/BUILD_USER_NAME
    fi

    if [ ! -s /root/rapidfort/RF_BASE ]; then
        echo debian > /root/rapidfort/RF_BASE
    fi

    if [ ! -s /root/rapidfort/RF_PARALLEL_BUILD ]; then
        echo 1 > /root/rapidfort/RF_PARALLEL_BUILD
    fi

    if [ ! -s /root/rapidfort/RF_CONTAINER_ENGINE ]; then
        echo docker > /root/rapidfort/RF_CONTAINER_ENGINE
    fi

    if [ ! -s /root/rapidfort/RF_SKIP_PRODMON ]; then
        echo yes > /root/rapidfort/RF_SKIP_PRODMON
    fi

    ln -svf /root/rapidfort/functional-tests/devops/whereami.sh /usr/local/bin/whereami
    ln -svf /root/rapidfort/functional-tests/devops/whatsnew.sh /usr/local/bin/whatsnew
    ln -svf /root/rapidfort/functional-tests/devops/pullall.sh /usr/local/bin/pullall
    ln -svf /root/rapidfort/functional-tests/devops/rfbuild.sh /usr/local/bin/rfbuild
    ln -svf /root/rapidfort/functional-tests/devops/registry /usr/local/bin/registry

    ln -svf /root/rapidfort/backend/test/license/eph-lic.sh /usr/local/bin/eph-lic.sh
    cp rfdev /usr/local/bin/rfdev
    cp -vf xd* /usr/local/bin
}

init "${1}"

