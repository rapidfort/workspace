#!/bin/bash -ex

YQ_RELEASE=v4.43.1
KIND_RELEASE=v0.22.0
GOLANG_RELEASE=1.22.2
HELM_RELEASE=v3.14.4


# Generic for MacOSX, Linux. arm64 is sometimes refererred as aarch64
ARCH=$(uname -m)
if [[ "$ARCH" == "aarch64" ]] ; then
    ARCH_ALT=arm64
elif [[ "$ARCH" == "arm64" ]] ; then
    ARCH_ALT=aarch64
else
    ARCH_ALT=NOT_SUPPORTED
fi
export OS=$(uname)
export OS_STR=${OS,,}
export ARCH
export ARCH_ALT

tailscale_install() {
    curl -fsSL https://tailscale.com/install.sh | sh
}

docker_install() {
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm -f get-docker.sh
}

aws_install() {
    rm -rf awscliv2.zip
    URL="https://awscli.amazonaws.com/awscli-exe-linux-${ARCH}.zip"
    curl -o "awscliv2.zip" ${URL}
    unzip awscliv2.zip
    ./aws/install
    rm -rf awscliv2.zip
}

az_install() {
    curl -sL https://aka.ms/InstallAzureCLIDeb | bash
}

gcp_install() {
    curl -sSL https://sdk.cloud.google.com | bash
}

go_install() {
    set -x
    local arch=${ARCH}

    URL=https://go.dev/dl/go${GOLANG_RELEASE}.${OS_STR}-${arch}.tar.gz
    if ! curl --output /dev/null --silent --head --fail -L "${URL}"; then
        arch=${ARCH_ALT}
    fi

    URL=https://go.dev/dl/go${GOLANG_RELEASE}.${OS_STR}-${arch}.tar.gz
    curl -Lo go${GOLANG_RELEASE}.${OS_STR}-${arch}.tar.gz ${URL}
    rm -rf /usr/local/go && tar -C /usr/local -xzf go${GOLANG_RELEASE}.${OS_STR}-${arch}.tar.gz
    rm go${GOLANG_RELEASE}.${OS_STR}-${arch}.tar.gz
}

yq_install() {
    local arch=${ARCH}
    URL=https://github.com/mikefarah/yq/releases/download/${YQ_RELEASE}/yq_${OS_STR}_${arch}
    if ! curl --output /dev/null --silent --head --fail -L "$URL"; then
        arch=$ARCH_ALT
    fi
    URL=https://github.com/mikefarah/yq/releases/download/${YQ_RELEASE}/yq_${OS_STR}_${arch}
    curl -Lo /usr/local/bin/yq "${URL}"
    chmod +x /usr/local/bin/yq
}

kind_install() {
    local arch=${ARCH}
    URL=https://kind.sigs.k8s.io/dl/${KIND_RELEASE}/kind-${OS_STR}-${arch}
    if ! curl --output /dev/null --silent --head --fail -L "${URL}"; then
        arch=${ARCH_ALT}
    fi
    URL=https://kind.sigs.k8s.io/dl/${KIND_RELEASE}/kind-${OS_STR}-${arch}
    curl -Lo /usr/local/bin/kind ${URL}
    chmod +x /usr/local/bin/kind
}

helm_install() {
    local arch=$ARCH
    URL=https://get.helm.sh/helm-${HELM_RELEASE}-$OS_STR-$arch.tar.gz
    if ! curl --output /dev/null --silent --head --fail -L "$URL"; then
        arch=$ARCH_ALT
    fi
    URL=https://get.helm.sh/helm-${HELM_RELEASE}-$OS_STR-$arch.tar.gz
    curl -Lo helm-${HELM_RELEASE}-${OS_STR}-${arch}.tar.gz $URL
    tar zxvf helm-${HELM_RELEASE}-${OS_STR}-${arch}.tar.gz
    mv -vf ${OS_STR}-${arch}/helm /usr/local/bin
    rm -rf ${OS_STR}-${arch}
    rm -f helm-${HELM_RELEASE}-${OS_STR}-${arch}.tar.gz
}

kubectl_install() {
    local arch=$ARCH
    URL="https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/${OS_STR}/${arch}/kubectl"
    if ! curl --output /dev/null --silent --head --fail -L "${URL}"; then
        arch=${ARCH_ALT}
    fi
    URL="https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/${OS_STR}/${arch}/kubectl"
    curl -Lo /usr/local/bin/kubectl "${URL}"
    chmod +x /usr/local/bin/kubectl
}

debian_init() {
    export TZ="/usr/share/zoneinfo/America/Los_Angeles"
    export LC_ALL="C"
    export DEBIAN_FRONTEND=noninteractive
    apt update
    # Please keep it sorted
    apt install -y acl \
                    apcalc \
                    aptitude \
                    apt-transport-https \
                    autoconf \
                    bc \
                    bison \
                    bsdmainutils \
                    build-essential \
                    ca-certificates \
                    calc \
                    cargo \
                    cmake-data \
                    conntrack \
                    curl \
                    default-libmysqlclient-dev \
                    default-mysql-client \
                    emacs-nox \
                    ethtool \
                    flex \
                    fzf \
                    git \
                    gnupg \
                    inotify-tools \
                    jq \
                    libffi-dev \
                    libssl-dev \
                    libtool \
                    lsb-release \
                    lvm2 \
                    lynx \
                    moreutils \
                    net-tools \
                    npm \
                    openntpd \
                    parallel \
                    pkg-config \
                    procmail \
                    pylint \
                    python3.11-venv \
                    python3-dev \
                    python3-pip \
                    redis-tools \
                    rsync \
                    screen \
                    shc \
                    shellcheck \
                    sl \
                    socat \
                    strace \
                    sudo \
                    swig \
                    tcpdump \
                    time \
                    tmux \
                    unzip \
                    vim \
                    wget
}

init() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [[ -f /etc/os-release ]]; then
            . /etc/os-release
            if [[ "$ID" == "debian" ]]; then
                debian_init
                [ -z "$(command -v docker)" ]       && docker_install       || true
                [ -z "$(command -v tailscale)" ]    && tailscale_install    || true
                [ -z "$(command -v go)" ]           && go_install           || true
                [ -z "$(command -v helm)" ]         && helm_install         || true
                [ -z "$(command -v kind)" ]         && kind_install         || true
                [ -z "$(command -v yq)" ]           && yq_install           || true
                [ -z "$(command -v kubectl)" ]      && kubectl_install      || true
                [ -z "$(command -v aws)" ]          && aws_install          || true
                [ -z "$(command -v az)" ]           && az_install           || true
                #[ -z "$(command -v gcloud)" ]       && gcp_install          || true
            fi
        fi
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "MacOSX: ToDo"
    else
        echo "NotSupported: $(uname) ToDo"
    fi

    # install aliases
    for f in .bashrc .pylintrc .screenrc .vimrc .kubectl_aliases .user_data .bashrc.rfserver
    do
        cp -f $f ~
    done

    if test -s $HOME/.git-prompt.sh ; then
        curl -Lo $HOME/.git-prompt.sh https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh
        source $HOME/.git-prompt.sh
    fi

    source ~/.bashrc
    mkdir -p /root/rapidfort

    # Setup RapidFort
    [ ! -s /root/BUILD_USER_NAME ] && echo build-system > /root/BUILD_USER_NAME || true
    [ ! -s /root/rapidfort/RF_BASE ] && echo ubi8 > /root/rapidfort/RF_BASE || true
    [ ! -s /root/rapidfort/RF_PARALLEL_BUILD ] && echo 1 > /root/rapidfort/RF_PARALLEL_BUILD || true
    [ ! -s /root/rapidfort/RF_CONTAINER_ENGINE ] && echo docker > /root/rapidfort/RF_CONTAINER_ENGINE || true

    ln -svf /root/rapidfort/functional-tests/devops/whereami.sh /usr/local/bin/whereami
    ln -svf /root/rapidfort/functional-tests/devops/whatsnew.sh /usr/local/bin/whatsnew
    ln -svf /root/rapidfort/functional-tests/devops/pullall.sh /usr/local/bin/pullall
    ln -svf /root/rapidfort/functional-tests/devops/rfbuild.sh /usr/local/bin/rfbuild
    ln -svf /root/rapidfort/backend/test/license/eph-lic.sh /usr/local/bin/eph-lic.sh
    cp rfdev /usr/local/bin/rfdev
}

init

